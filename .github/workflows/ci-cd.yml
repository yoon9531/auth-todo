# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Add execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      # 3. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 4. 테스트 실행
      # - name: Run tests
      # run: ./gradlew test

  dockerize-and-deploy:
    name: Dockerize and Deploy
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD }}

      # 3. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t syhere/auth-todo-app:latest .

      # 4. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push syhere/auth-todo-app:latest

      # 5. SSH를 통해 서버로 배포
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker pull syhere/auth-todo-app:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d -p 8080:8080 --name my-app \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://database-1.czs2e0qaqyw7.ap-northeast-2.rds.amazonaws.com:3306/test \
              -e SPRING_DATASOURCE_USERNAME=admin \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              syhere/auth-todo-app:latest

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
